diff ledger-live-common/src/account/balanceHistoryCache.ts ledger-common/src/account/balanceHistoryCache.ts
10c10
< import { granularities } from "../portfolio/v2/range";
---
> import { granularities } from "../rangeDates";
Only in ledger-live-common/src/account: formatters.ts
Only in ledger-live-common/src/account: helpers.test.ts


diff ledger-live-common/src/account/helpers.ts ledger-common/src/account/helpers.ts
6,10d5
< import { isAccountDelegating } from "../families/tezos/bakers";
< import {
<   BitcoinAccount,
<   initialBitcoinResourcesValue,
< } from "../families/bitcoin/types";
24,25d18
< import { TronAccount } from "../families/tron/types";
< import { CosmosAccount } from "../families/cosmos/types";
102,108c95,102
<   if (a.type === "Account" && a.currency.family === "tron") {
<     const tronAcc = a as TronAccount;
<     // FIXME: here we compared a BigNumber to a number, would always return false
<     return (
<       tronAcc.tronResources && tronAcc.tronResources.bandwidth.freeLimit.eq(0)
<     );
<   }
---
>   // STP: to fix
>   // if (a.type === "Account" && a.currency.family === "tron") {
>   //   const tronAcc = a as TronAccount;
>   //   // FIXME: here we compared a BigNumber to a number, would always return false
>   //   return (
>   //     tronAcc.tronResources && tronAcc.tronResources.bandwidth.freeLimit.eq(0)
>   //   );
>   // }
163,172c157,167
<   if (copy.currency.family === "tron") {
<     const tronAcc = copy as TronAccount;
<     tronAcc.tronResources = {
<       ...tronAcc.tronResources,
<       cacheTransactionInfoById: {},
<     };
<   }
<   if (copy.currency.family === "bitcoin") {
<     (copy as BitcoinAccount).bitcoinResources = initialBitcoinResourcesValue;
<   }
---
>   // STP: to fix
>   // if (copy.currency.family === "tron") {
>   //   const tronAcc = copy as TronAccount;
>   //   tronAcc.tronResources = {
>   //     ...tronAcc.tronResources,
>   //     cacheTransactionInfoById: {},
>   //   };
>   // }
>   // if (copy.currency.family === "bitcoin") {
>   //   (copy as BitcoinAccount).bitcoinResources = initialBitcoinResourcesValue;
>   // }
247,268d241
< export const getVotesCount = (
<   account: AccountLike,
<   parentAccount?: Account | null | undefined
< ): number => {
<   const mainAccount = getMainAccount(account, parentAccount);
< 
<   // FIXME find a way to make it per family?
<   switch (mainAccount.currency.family) {
<     case "tezos":
<       return isAccountDelegating(account) ? 1 : 0;
<     case "tron":
<       return (mainAccount as TronAccount)?.tronResources?.votes.length || 0;
<     case "osmosis":
<     case "cosmos":
<       return (
<         (mainAccount as CosmosAccount)?.cosmosResources?.delegations.length || 0
<       );
<     default:
<       return 0;
<   }
< };
< 
Only in ledger-live-common/src/account: importAccounts.integration.test.ts
Only in ledger-live-common/src/account: importAccounts.test.ts
Only in ledger-live-common/src/account: importAccounts.ts


diff ledger-live-common/src/account/index.ts ledger-common/src/account/index.ts
1,5d0
< export * from "./helpers";
< export * from "./addAccounts";
< export * from "./support";
< export * from "./importAccounts";
< export * from "./serialization";
8c3,4
< export * from "./ordering";
---
> export * from "./addAccounts";
> export * from "./balanceHistoryCache";
9a6,7
> export * from "./helpers";
> export * from "./ordering";
11,12c9,10
< export * from "./formatters";
< export * from "./balanceHistoryCache";
---
> export * from "./serialization";
> export * from "./support";


diff ledger-live-common/src/account/serialization.ts ledger-common/src/account/serialization.ts
2,45d1
< import type {
<   TronAccount,
<   TronAccountRaw,
<   TronResources,
<   TronResourcesRaw,
< } from "../families/tron/types";
< import {
<   toBitcoinResourcesRaw,
<   fromBitcoinResourcesRaw,
< } from "../families/bitcoin/serialization";
< import {
<   toCosmosResourcesRaw,
<   fromCosmosResourcesRaw,
< } from "../families/cosmos/serialization";
< import {
<   toAlgorandResourcesRaw,
<   fromAlgorandResourcesRaw,
< } from "../families/algorand/serialization";
< import {
<   toPolkadotResourcesRaw,
<   fromPolkadotResourcesRaw,
< } from "../families/polkadot/serialization";
< import {
<   toTezosResourcesRaw,
<   fromTezosResourcesRaw,
< } from "../families/tezos/serialization";
< import {
<   toElrondResourcesRaw,
<   fromElrondResourcesRaw,
< } from "../families/elrond/serialization";
< import {
<   toCryptoOrgResourcesRaw,
<   fromCryptoOrgResourcesRaw,
< } from "../families/crypto_org/serialization";
< 
< import {
<   toSolanaResourcesRaw,
<   fromSolanaResourcesRaw,
< } from "../families/solana/serialization";
< 
< import {
<   toCeloResourcesRaw,
<   fromCeloResourcesRaw,
< } from "../families/celo/serialization";
51,52d6
< import { inferFamilyFromAccountId } from "./accountId";
< import accountByFamily from "../generated/account";
54c8
< import type { SwapOperation, SwapOperationRaw } from "../exchange/swap/types";
---
> import type { SwapOperation, SwapOperationRaw } from "../types";
59,62d12
< import {
<   fromCardanoResourceRaw,
<   toCardanoResourceRaw,
< } from "../families/cardano/serialization";
81,110d30
< import { CosmosAccount, CosmosAccountRaw } from "../families/cosmos/types";
< import { BitcoinAccount, BitcoinAccountRaw } from "../families/bitcoin/types";
< import {
<   AlgorandAccount,
<   AlgorandAccountRaw,
< } from "../families/algorand/types";
< import {
<   PolkadotAccount,
<   PolkadotAccountRaw,
< } from "../families/polkadot/types";
< import { ElrondAccount, ElrondAccountRaw } from "../families/elrond/types";
< import { CardanoAccount, CardanoAccountRaw } from "../families/cardano/types";
< import {
<   CryptoOrgAccount,
<   CryptoOrgAccountRaw,
< } from "../families/crypto_org/types";
< import { SolanaAccount, SolanaAccountRaw } from "../families/solana/types";
< import { TezosAccount, TezosAccountRaw } from "../families/tezos/types";
< import { CeloAccount, CeloAccountRaw } from "../families/celo/types";
< 
< export { toCosmosResourcesRaw, fromCosmosResourcesRaw };
< export { toAlgorandResourcesRaw, fromAlgorandResourcesRaw };
< export { toBitcoinResourcesRaw, fromBitcoinResourcesRaw };
< export { toPolkadotResourcesRaw, fromPolkadotResourcesRaw };
< export { toTezosResourcesRaw, fromTezosResourcesRaw };
< export { toElrondResourcesRaw, fromElrondResourcesRaw };
< export { toCryptoOrgResourcesRaw, fromCryptoOrgResourcesRaw };
< export { toCardanoResourceRaw, fromCardanoResourceRaw };
< export { toSolanaResourcesRaw, fromSolanaResourcesRaw };
< export { toCeloResourcesRaw, fromCeloResourcesRaw };
120a41
> // STP: to add a composition in ledger-live-common
147,160d67
<   let e = extra;
< 
<   if (e) {
<     const family = inferFamilyFromAccountId(accountId);
< 
<     if (family) {
<       const abf = accountByFamily[family];
< 
<       if (abf && abf.toOperationExtraRaw) {
<         e = abf.toOperationExtraRaw(e);
<       }
<     }
<   }
< 
170c77
<     extra: e,
---
>     extra: extra,
229a137
> // STP: to add a composition in ledger-live-common
256,269d163
<   let e = extra;
< 
<   if (e) {
<     const family = inferFamilyFromAccountId(accountId);
< 
<     if (family) {
<       const abf = accountByFamily[family];
< 
<       if (abf && abf.fromOperationExtraRaw) {
<         e = abf.fromOperationExtraRaw(e);
<       }
<     }
<   }
< 
282c176
<     extra: e || {},
---
>     extra: extra || {},
319,420d212
< export const toTronResourcesRaw = ({
<   frozen,
<   delegatedFrozen,
<   votes,
<   tronPower,
<   energy,
<   bandwidth,
<   unwithdrawnReward,
<   lastWithdrawnRewardDate,
<   lastVotedDate,
<   cacheTransactionInfoById: cacheTx,
< }: TronResources): TronResourcesRaw => {
<   const frozenBandwidth = frozen.bandwidth;
<   const frozenEnergy = frozen.energy;
<   const delegatedFrozenBandwidth = delegatedFrozen.bandwidth;
<   const delegatedFrozenEnergy = delegatedFrozen.energy;
<   const cacheTransactionInfoById = {};
< 
<   for (const k in cacheTx) {
<     const { fee, blockNumber, withdraw_amount, unfreeze_amount } = cacheTx[k];
<     cacheTransactionInfoById[k] = [
<       fee,
<       blockNumber,
<       withdraw_amount,
<       unfreeze_amount,
<     ];
<   }
< 
<   return {
<     frozen: {
<       bandwidth: frozenBandwidth
<         ? {
<             amount: frozenBandwidth.amount.toString(),
<             expiredAt: frozenBandwidth.expiredAt.toISOString(),
<           }
<         : undefined,
<       energy: frozenEnergy
<         ? {
<             amount: frozenEnergy.amount.toString(),
<             expiredAt: frozenEnergy.expiredAt.toISOString(),
<           }
<         : undefined,
<     },
<     delegatedFrozen: {
<       bandwidth: delegatedFrozenBandwidth
<         ? {
<             amount: delegatedFrozenBandwidth.amount.toString(),
<           }
<         : undefined,
<       energy: delegatedFrozenEnergy
<         ? {
<             amount: delegatedFrozenEnergy.amount.toString(),
<           }
<         : undefined,
<     },
<     votes,
<     tronPower,
<     energy: energy.toString(),
<     bandwidth: {
<       freeUsed: bandwidth.freeUsed.toString(),
<       freeLimit: bandwidth.freeLimit.toString(),
<       gainedUsed: bandwidth.gainedUsed.toString(),
<       gainedLimit: bandwidth.gainedLimit.toString(),
<     },
<     unwithdrawnReward: unwithdrawnReward.toString(),
<     lastWithdrawnRewardDate: lastWithdrawnRewardDate
<       ? lastWithdrawnRewardDate.toISOString()
<       : undefined,
<     lastVotedDate: lastVotedDate ? lastVotedDate.toISOString() : undefined,
<     cacheTransactionInfoById,
<   };
< };
< export const fromTronResourcesRaw = ({
<   frozen,
<   delegatedFrozen,
<   votes,
<   tronPower,
<   energy,
<   bandwidth,
<   unwithdrawnReward,
<   lastWithdrawnRewardDate,
<   lastVotedDate,
<   cacheTransactionInfoById: cacheTransactionInfoByIdRaw,
< }: TronResourcesRaw): TronResources => {
<   const frozenBandwidth = frozen.bandwidth;
<   const frozenEnergy = frozen.energy;
<   const delegatedFrozenBandwidth = delegatedFrozen.bandwidth;
<   const delegatedFrozenEnergy = delegatedFrozen.energy;
<   const cacheTransactionInfoById = {};
< 
<   if (cacheTransactionInfoByIdRaw) {
<     for (const k in cacheTransactionInfoByIdRaw) {
<       const [fee, blockNumber, withdraw_amount, unfreeze_amount] =
<         cacheTransactionInfoByIdRaw[k];
<       cacheTransactionInfoById[k] = {
<         fee,
<         blockNumber,
<         withdraw_amount,
<         unfreeze_amount,
<       };
<     }
<   }
422,465d213
<   return {
<     frozen: {
<       bandwidth: frozenBandwidth
<         ? {
<             amount: new BigNumber(frozenBandwidth.amount),
<             expiredAt: new Date(frozenBandwidth.expiredAt),
<           }
<         : undefined,
<       energy: frozenEnergy
<         ? {
<             amount: new BigNumber(frozenEnergy.amount),
<             expiredAt: new Date(frozenEnergy.expiredAt),
<           }
<         : undefined,
<     },
<     delegatedFrozen: {
<       bandwidth: delegatedFrozenBandwidth
<         ? {
<             amount: new BigNumber(delegatedFrozenBandwidth.amount),
<           }
<         : undefined,
<       energy: delegatedFrozenEnergy
<         ? {
<             amount: new BigNumber(delegatedFrozenEnergy.amount),
<           }
<         : undefined,
<     },
<     votes,
<     tronPower,
<     energy: new BigNumber(energy),
<     bandwidth: {
<       freeUsed: new BigNumber(bandwidth.freeUsed),
<       freeLimit: new BigNumber(bandwidth.freeLimit),
<       gainedUsed: new BigNumber(bandwidth.gainedUsed),
<       gainedLimit: new BigNumber(bandwidth.gainedLimit),
<     },
<     unwithdrawnReward: new BigNumber(unwithdrawnReward),
<     lastWithdrawnRewardDate: lastWithdrawnRewardDate
<       ? new Date(lastWithdrawnRewardDate)
<       : undefined,
<     lastVotedDate: lastVotedDate ? new Date(lastVotedDate) : undefined,
<     cacheTransactionInfoById,
<   };
< };
678a427,428
> 
> // STP: to add a composition in ledger-live-common
785,873d534
<   switch (res.currency.family) {
<     case "tron": {
<       const tronResourcesRaw = (rawAccount as TronAccountRaw).tronResources;
<       if (tronResourcesRaw)
<         (res as TronAccount).tronResources =
<           fromTronResourcesRaw(tronResourcesRaw);
<       break;
<     }
<     case "osmosis":
<     case "cosmos": {
<       const cosmosResourcesRaw = (rawAccount as CosmosAccountRaw)
<         .cosmosResources;
<       if (cosmosResourcesRaw)
<         (res as CosmosAccount).cosmosResources =
<           fromCosmosResourcesRaw(cosmosResourcesRaw);
<       break;
<     }
<     case "tezos": {
<       const tezosResourcesRaw = (rawAccount as TezosAccountRaw).tezosResources;
<       if (tezosResourcesRaw)
<         (res as TezosAccount).tezosResources =
<           fromTezosResourcesRaw(tezosResourcesRaw);
<       break;
<     }
<     case "bitcoin": {
<       const bitcoinResourcesRaw = (rawAccount as BitcoinAccountRaw)
<         .bitcoinResources;
<       if (bitcoinResourcesRaw)
<         (res as BitcoinAccount).bitcoinResources =
<           fromBitcoinResourcesRaw(bitcoinResourcesRaw);
<       break;
<     }
<     case "algorand": {
<       const algoResourcesRaw = (rawAccount as AlgorandAccountRaw)
<         .algorandResources;
<       if (algoResourcesRaw)
<         (res as AlgorandAccount).algorandResources =
<           fromAlgorandResourcesRaw(algoResourcesRaw);
<       break;
<     }
<     case "polkadot": {
<       const polkadotResourcesRaw = (rawAccount as PolkadotAccountRaw)
<         .polkadotResources;
<       if (polkadotResourcesRaw)
<         (res as PolkadotAccount).polkadotResources =
<           fromPolkadotResourcesRaw(polkadotResourcesRaw);
<       break;
<     }
<     case "elrond": {
<       const elrondResourcesRaw = (rawAccount as ElrondAccountRaw)
<         .elrondResources;
<       if (elrondResourcesRaw)
<         (res as ElrondAccount).elrondResources =
<           fromElrondResourcesRaw(elrondResourcesRaw);
<       break;
<     }
<     case "cardano": {
<       const cardanoResourcesRaw = (rawAccount as CardanoAccountRaw)
<         .cardanoResources;
<       if (cardanoResourcesRaw)
<         (res as CardanoAccount).cardanoResources =
<           fromCardanoResourceRaw(cardanoResourcesRaw);
<       break;
<     }
<     case "solana": {
<       const solanaResourcesRaw = (rawAccount as SolanaAccountRaw)
<         .solanaResources;
<       if (solanaResourcesRaw)
<         (res as SolanaAccount).solanaResources =
<           fromSolanaResourcesRaw(solanaResourcesRaw);
<       break;
<     }
<     case "crypto_org": {
<       const cryptoOrgResourcesRaw = (rawAccount as CryptoOrgAccountRaw)
<         .cryptoOrgResources;
<       if (cryptoOrgResourcesRaw)
<         (res as CryptoOrgAccount).cryptoOrgResources =
<           fromCryptoOrgResourcesRaw(cryptoOrgResourcesRaw);
<       break;
<     }
<     case "celo": {
<       const celoResourcesRaw = (rawAccount as CeloAccountRaw).celoResources;
<       if (celoResourcesRaw)
<         (res as CeloAccount).celoResources =
<           fromCeloResourcesRaw(celoResourcesRaw);
<       break;
<     }
<   }
< 
881,982c542
< type FromAccountRawFn = (rawAccount: AccountRaw) => Account;
< export function fromAccountRaw2(
<   genericFromFn: FromAccountRawFn
< ): FromAccountRawFn {
<   return function (rawAccount: AccountRaw): Account {
<     const res = genericFromFn(rawAccount);
< 
<     switch (res.currency.family) {
<       case "tron": {
<         const tronResourcesRaw = (rawAccount as TronAccountRaw).tronResources;
<         if (tronResourcesRaw)
<           (res as TronAccount).tronResources =
<             fromTronResourcesRaw(tronResourcesRaw);
<         break;
<       }
<       case "osmosis":
<       case "cosmos": {
<         const cosmosResourcesRaw = (rawAccount as CosmosAccountRaw)
<           .cosmosResources;
<         if (cosmosResourcesRaw)
<           (res as CosmosAccount).cosmosResources =
<             fromCosmosResourcesRaw(cosmosResourcesRaw);
<         break;
<       }
<       case "tezos": {
<         const tezosResourcesRaw = (rawAccount as TezosAccountRaw).tezosResources;
<         if (tezosResourcesRaw)
<           (res as TezosAccount).tezosResources =
<             fromTezosResourcesRaw(tezosResourcesRaw);
<         break;
<       }
<       case "bitcoin": {
<         const bitcoinResourcesRaw = (rawAccount as BitcoinAccountRaw)
<           .bitcoinResources;
<         if (bitcoinResourcesRaw)
<           (res as BitcoinAccount).bitcoinResources =
<             fromBitcoinResourcesRaw(bitcoinResourcesRaw);
<         break;
<       }
<       case "algorand": {
<         const algoResourcesRaw = (rawAccount as AlgorandAccountRaw)
<           .algorandResources;
<         if (algoResourcesRaw)
<           (res as AlgorandAccount).algorandResources =
<             fromAlgorandResourcesRaw(algoResourcesRaw);
<         break;
<       }
<       case "polkadot": {
<         const polkadotResourcesRaw = (rawAccount as PolkadotAccountRaw)
<           .polkadotResources;
<         if (polkadotResourcesRaw)
<           (res as PolkadotAccount).polkadotResources =
<             fromPolkadotResourcesRaw(polkadotResourcesRaw);
<         break;
<       }
<       case "elrond": {
<         const elrondResourcesRaw = (rawAccount as ElrondAccountRaw)
<           .elrondResources;
<         if (elrondResourcesRaw)
<           (res as ElrondAccount).elrondResources =
<             fromElrondResourcesRaw(elrondResourcesRaw);
<         break;
<       }
<       case "cardano": {
<         const cardanoResourcesRaw = (rawAccount as CardanoAccountRaw)
<           .cardanoResources;
<         if (cardanoResourcesRaw)
<           (res as CardanoAccount).cardanoResources =
<             fromCardanoResourceRaw(cardanoResourcesRaw);
<         break;
<       }
<       case "solana": {
<         const solanaResourcesRaw = (rawAccount as SolanaAccountRaw)
<           .solanaResources;
<         if (solanaResourcesRaw)
<           (res as SolanaAccount).solanaResources =
<             fromSolanaResourcesRaw(solanaResourcesRaw);
<         break;
<       }
<       case "crypto_org": {
<         const cryptoOrgResourcesRaw = (rawAccount as CryptoOrgAccountRaw)
<           .cryptoOrgResources;
<         if (cryptoOrgResourcesRaw)
<           (res as CryptoOrgAccount).cryptoOrgResources =
<             fromCryptoOrgResourcesRaw(cryptoOrgResourcesRaw);
<         break;
<       }
<       case "celo": {
<         const celoResourcesRaw = (rawAccount as CeloAccountRaw).celoResources;
<         if (celoResourcesRaw)
<           (res as CeloAccount).celoResources =
<             fromCeloResourcesRaw(celoResourcesRaw);
<         break;
<       }
<     }
< 
<     return res;
<   };
< }
< 
< export const concreteFromAccountRaw2 = fromAccountRaw2(fromAccountRaw);
< 
---
> // STP: to add a composition in ledger-live-common
1055,1163d614
<   switch (account.currency.family) {
<     case "tron": {
<       const tronAccount = account as TronAccount;
<       if (tronAccount.tronResources) {
<         (res as TronAccountRaw).tronResources = toTronResourcesRaw(
<           tronAccount.tronResources
<         );
<       }
<       break;
<     }
<     case "osmosis": {
<       const cosmosAccount = account as CosmosAccount;
<       if (cosmosAccount.cosmosResources) {
<         (res as CosmosAccountRaw).cosmosResources = toCosmosResourcesRaw(
<           cosmosAccount.cosmosResources
<         );
<       }
<       break;
<     }
<     case "cosmos": {
<       const cosmosAccount = account as CosmosAccount;
<       if (cosmosAccount.cosmosResources) {
<         (res as CosmosAccountRaw).cosmosResources = toCosmosResourcesRaw(
<           cosmosAccount.cosmosResources
<         );
<       }
<       break;
<     }
<     case "tezos": {
<       const tezosAccount = account as TezosAccount;
<       if (tezosAccount.tezosResources) {
<         (res as TezosAccountRaw).tezosResources = toTezosResourcesRaw(
<           tezosAccount.tezosResources
<         );
<       }
<       break;
<     }
<     case "bitcoin": {
<       const bitcoinAccount = account as BitcoinAccount;
<       if (bitcoinAccount.bitcoinResources) {
<         (res as BitcoinAccountRaw).bitcoinResources = toBitcoinResourcesRaw(
<           bitcoinAccount.bitcoinResources
<         );
<       }
<       break;
<     }
<     case "algorand": {
<       const algorandAccount = account as AlgorandAccount;
<       if (algorandAccount.algorandResources) {
<         (res as AlgorandAccountRaw).algorandResources = toAlgorandResourcesRaw(
<           algorandAccount.algorandResources
<         );
<       }
<       break;
<     }
<     case "polkadot": {
<       const polkadotAccount = account as PolkadotAccount;
<       if (polkadotAccount.polkadotResources) {
<         (res as PolkadotAccountRaw).polkadotResources = toPolkadotResourcesRaw(
<           polkadotAccount.polkadotResources
<         );
<       }
<       break;
<     }
<     case "elrond": {
<       const elrondAccount = account as ElrondAccount;
<       if (elrondAccount.elrondResources) {
<         (res as ElrondAccountRaw).elrondResources = toElrondResourcesRaw(
<           elrondAccount.elrondResources
<         );
<       }
<       break;
<     }
<     case "cardano": {
<       const cardanoAccount = account as CardanoAccount;
<       if (cardanoAccount.cardanoResources) {
<         (res as CardanoAccountRaw).cardanoResources = toCardanoResourceRaw(
<           cardanoAccount.cardanoResources
<         );
<       }
<       break;
<     }
<     case "solana": {
<       const solanaAccount = account as SolanaAccount;
<       if (solanaAccount.solanaResources) {
<         (res as SolanaAccountRaw).solanaResources = toSolanaResourcesRaw(
<           solanaAccount.solanaResources
<         );
<       }
<       break;
<     }
<     case "crypto_org": {
<       const crytpoOrgAccount = account as CryptoOrgAccount;
<       if (crytpoOrgAccount.cryptoOrgResources) {
<         (res as CryptoOrgAccountRaw).cryptoOrgResources =
<           toCryptoOrgResourcesRaw(crytpoOrgAccount.cryptoOrgResources);
<       }
<       break;
<     }
<     case "celo": {
<       const celoAccount = account as CeloAccount;
<       if (celoAccount.celoResources)
<         (res as CeloAccountRaw).celoResources = toCeloResourcesRaw(
<           celoAccount.celoResources
<         );
<       break;
<     }
<   }
< 


diff ledger-live-common/src/account/support.ts ledger-common/src/account/support.ts
13,14d12
< import { getMainAccount } from "../account";
< import { getAccountBridge } from "../bridge";
49,61d46
< export function canSend(
<   account: AccountLike,
<   parentAccount: Account | null | undefined
< ): boolean {
<   try {
<     getAccountBridge(account, parentAccount).createTransaction(
<       getMainAccount(account, parentAccount)
<     );
<     return true;
<   } catch (e) {
<     return false;
<   }
< }
